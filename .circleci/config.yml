version: 2.1
orbs:
  gcp-cli: circleci/gcp-cli@2.4.1

commands:
  gcp-oidc-generate-cred-config-file:
    description: "Authenticate with GCP using a CircleCI OIDC token."
    parameters:
      project_id:
        type: env_var_name
        default: GCP_PROJECT_ID
      workload_identity_pool_id:
        type: env_var_name
        default: GCP_WIP_ID
      workload_identity_pool_provider_id:
        type: env_var_name
        default: GCP_WIP_PROVIDER_ID
      service_account_email:
        type: env_var_name
        default: GCP_SERVICE_ACCOUNT_EMAIL
      gcp_cred_config_file_path:
        type: string
        default: /home/circleci/gcp_cred_config.json
      oidc_token_file_path:
        type: string
        default: /home/circleci/oidc_token.json
    steps:
      - run:
          command: |
            # Store OIDC token in temp file
            echo $CIRCLE_OIDC_TOKEN > << parameters.oidc_token_file_path >>
            # Create a credential configuration for the generated OIDC ID Token
            gcloud iam workload-identity-pools create-cred-config \
                "projects/${<< parameters.project_id >>}/locations/global/workloadIdentityPools/${<< parameters.workload_identity_pool_id >>}/providers/${<< parameters.workload_identity_pool_provider_id >>}"\
                --output-file="<< parameters.gcp_cred_config_file_path >>" \
                --service-account="${<< parameters.service_account_email >>}" \
                --credential-source-file=<< parameters.oidc_token_file_path >>

  gcp-oidc-authenticate:
    description: "Authenticate with GCP using a GCP credentials file."
    parameters:
      gcp_cred_config_file_path:
        type: string
        default: /home/circleci/gcp_cred_config.json
    steps:
      - run:
          command: |
            # Configure gcloud to leverage the generated credential configuration
            gcloud auth login --brief --cred-file "<< parameters.gcp_cred_config_file_path >>"
            # Configure ADC
            echo "export GOOGLE_APPLICATION_CREDENTIALS='<< parameters.gcp_cred_config_file_path >>'" | tee -a "$BASH_ENV"
jobs:
  gcp-oidc-defaults:
    executor: gcp-cli/default
    steps:
      - checkout # If you need access to your project files
      - gcp-cli/install
      - gcp-oidc-generate-cred-config-file
      - gcp-oidc-authenticate
      - run:
          name: Verify that gcloud is authenticated
          environment:
            GCP_SERVICE_ACCOUNT_EMAIL: circleci@devops-iz.iam.gserviceaccount.com
          command: |
            # Assuming you have kubectl configured with the appropriate context
            # kubectl get nodes
            # Set the OIDC token as a kubectl credential
            gcloud components install kubectl
            kubectl version --client
            gcloud container clusters get-credentials devops-iz-gke --location=us-central1-a
            # # kubectl config set-credentials circleci@devops-iz.iam.gserviceaccount.com --token=$CIRCLE_OIDC_TOKEN
            
            # # Set the OIDC authentication in the kubeconfig file
            # kubectl config set-context oidc-context --cluster=devops-iz-gke --user=circleci@devops-iz.iam.gserviceaccount.com
            # kubectl config use-context oidc-context
            kubectl get nodes
          # command: gcloud iam service-accounts get-iam-policy "${GCP_SERVICE_ACCOUNT_EMAIL}"
      # - run:
      #     name: Install kubectl
      #     command: |
      #       curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      #       chmod +x kubectl
      #       sudo mv kubectl /usr/local/bin/
      - run:
          name: Deploy Nginx to Kubernetes
          command: |
            # Assuming you have kubectl configured with the appropriate context
            kubectl get nodes
    # when:
    #   # You can specify when to run this job (e.g., only on specific branches)
    #   branch:
    #     only:
    #       - main # Adjust to your desired branch

workflows:
    main:
      jobs:
        - gcp-oidc-defaults:
            name: Generate Creds File and Authenticate
            context:
            - gcp-oidc-dev

# gcloud container clusters get-credentials authn-authz-cluster

# gcloud container clusters get-credentials devops-iz-gke --location=us-central1-a
# gcloud container clusters get-credentials devops-iz-gke --zone us-central1-a --project devops-iz